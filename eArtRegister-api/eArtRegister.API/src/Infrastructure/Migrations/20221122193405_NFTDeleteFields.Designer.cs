// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eArtRegister.API.Infrastructure.Persistence;

#nullable disable

namespace eArtRegister.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221122193405_NFTDeleteFields")]
    partial class NFTDeleteFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_code");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_device_codes_expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("algorithm");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("boolean")
                        .HasColumnName("data_protected");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_x509certificate");

                    b.Property<string>("Use")
                        .HasColumnType("text")
                        .HasColumnName("use");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_keys");

                    b.HasIndex("Use")
                        .HasDatabaseName("ix_keys_use");

                    b.ToTable("keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed_time");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("ConsumedTime")
                        .HasDatabaseName("ix_persisted_grants_consumed_time");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_client_id_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_session_id_type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.Bundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Abi")
                        .HasColumnType("text")
                        .HasColumnName("abi");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Bytecode")
                        .HasColumnType("text")
                        .HasColumnName("bytecode");

                    b.Property<string>("Contract")
                        .HasColumnType("text")
                        .HasColumnName("contract");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CustomRoot")
                        .HasColumnType("text")
                        .HasColumnName("custom_root");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("bundle_pkey");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_bundle_owner_id");

                    b.ToTable("bundle", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.BundleRate", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid")
                        .HasColumnName("bundle_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateOfRate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_rate");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.HasKey("UserId", "BundleId")
                        .HasName("bundle_rate_pkey");

                    b.HasIndex("BundleId")
                        .HasDatabaseName("ix_bundle_rate_bundle_id");

                    b.ToTable("bundle_rate", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("category_pkey");

                    b.ToTable("category", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.FollowBundle", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid")
                        .HasColumnName("bundle_id");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("follow_date");

                    b.HasKey("UserId", "BundleId")
                        .HasName("follow_bundle_pkey");

                    b.HasIndex("BundleId")
                        .HasDatabaseName("ix_follow_bundle_bundle_id");

                    b.ToTable("follow_bundle", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.FollowNFT", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("NFTId")
                        .HasColumnType("uuid")
                        .HasColumnName("nft_id");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("follow_date");

                    b.HasKey("UserId", "NFTId")
                        .HasName("follow_nft_pkey");

                    b.HasIndex("NFTId")
                        .HasDatabaseName("ix_follow_nft_nft_id");

                    b.ToTable("follow_nft", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.FollowUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("FollowedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("followed_user_id");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("follow_date");

                    b.HasKey("UserId", "FollowedUserId")
                        .HasName("follow_user_pkey");

                    b.HasIndex("FollowedUserId")
                        .HasDatabaseName("ix_follow_user_followed_user_id");

                    b.ToTable("follow_user", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid")
                        .HasColumnName("bundle_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<double>("CreatorRoyalty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("creator_royality");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("current_price");

                    b.Property<DateTime>("CurrentPriceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("current_price_date");

                    b.Property<string>("CurrentWallet")
                        .HasColumnType("text")
                        .HasColumnName("current_wallet");

                    b.Property<long>("DaysToPay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("days_to_pay");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("FixedPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("fixed_price");

                    b.Property<string>("IPFSId")
                        .HasColumnType("text")
                        .HasColumnName("ipfs_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("MinBidPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("min_bid_price");

                    b.Property<double>("MinimumParticipation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("minimum_participation");

                    b.Property<DateTime>("MintedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("minted_at");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PurchaseContract")
                        .HasColumnType("text")
                        .HasColumnName("purchase_contract");

                    b.Property<string>("StatusId")
                        .HasColumnType("text")
                        .HasColumnName("status_id");

                    b.Property<long>("TokenId")
                        .HasColumnType("bigint")
                        .HasColumnName("token_id");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("text")
                        .HasColumnName("transaction_hash");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("nft_pkey");

                    b.HasIndex("BundleId")
                        .HasDatabaseName("ix_nft_bundle_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_nft_creator_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_nft_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_nft_user_id");

                    b.ToTable("nft", "eart");

                    b.HasAnnotation("LC_TRIGGER_AFTER_UPDATE_NFT", "CREATE FUNCTION LC_TRIGGER_AFTER_UPDATE_NFT() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_NFT$\r\nBEGIN\r\n  IF OLD.current_price <> NEW.current_price THEN \r\n    INSERT INTO eart.nft_price_history (\"parent_id\", \"price\", \"date_of_price\") SELECT OLD.id, \r\n    OLD.current_price, \r\n    OLD.current_price_date;\r\n  END IF;\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_NFT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_NFT AFTER UPDATE\r\nON \"eart.nft\"\r\nFOR EACH ROW EXECUTE PROCEDURE LC_TRIGGER_AFTER_UPDATE_NFT();");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTActionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("EventAction")
                        .HasColumnType("text")
                        .HasColumnName("event_action");

                    b.Property<long>("EventTimestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("event_timestamp");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<Guid?>("NFTId")
                        .HasColumnType("uuid")
                        .HasColumnName("nft_id");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("text")
                        .HasColumnName("transaction_hash");

                    b.Property<string>("Wallet")
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("Id")
                        .HasName("nft_action_history_pkey");

                    b.HasIndex("NFTId")
                        .HasDatabaseName("ix_nft_action_history_nft_id");

                    b.ToTable("nft_action_history", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTCategory", b =>
                {
                    b.Property<Guid>("NFTId")
                        .HasColumnType("uuid")
                        .HasColumnName("nft_id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.HasKey("NFTId", "CategoryId")
                        .HasName("pk_nft_category");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_nft_category_category_id");

                    b.ToTable("nft_category", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTLike", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("NFTId")
                        .HasColumnType("uuid")
                        .HasColumnName("nft_id");

                    b.Property<DateTime>("LikedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liked_date");

                    b.HasKey("UserId", "NFTId")
                        .HasName("nft_like_pkey");

                    b.HasIndex("NFTId")
                        .HasDatabaseName("ix_nft_like_nft_id");

                    b.ToTable("nft_like", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTPriceHistory", b =>
                {
                    b.Property<DateTime>("DateOfPrice")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_price");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.ToTable("nft_price_history", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTRate", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("NFTId")
                        .HasColumnType("uuid")
                        .HasColumnName("nft_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateOfRate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_rate");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.HasKey("UserId", "NFTId")
                        .HasName("nft_rate_pkey");

                    b.HasIndex("NFTId")
                        .HasDatabaseName("ix_nft_rate_nft_id");

                    b.ToTable("nft_rate", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("nft_status_pkey");

                    b.ToTable("nft_status", "eart");

                    b.HasData(
                        new
                        {
                            Id = "MINTED"
                        },
                        new
                        {
                            Id = "ON_SALE"
                        },
                        new
                        {
                            Id = "NOT_ON_SALE"
                        },
                        new
                        {
                            Id = "PENDING"
                        },
                        new
                        {
                            Id = "APPROVED"
                        },
                        new
                        {
                            Id = "WAITING_FOR_APPROVAL"
                        },
                        new
                        {
                            Id = "SOLD"
                        },
                        new
                        {
                            Id = "CANCELED"
                        });
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.PriceOffer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("NFTId")
                        .HasColumnType("uuid")
                        .HasColumnName("nft_id");

                    b.Property<DateTime>("DateOfOffer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_offer");

                    b.Property<double>("Offer")
                        .HasColumnType("double precision")
                        .HasColumnName("offer");

                    b.HasKey("UserId", "NFTId")
                        .HasName("price_offer_pkey");

                    b.HasIndex("NFTId")
                        .HasDatabaseName("ix_price_offer_nft_id");

                    b.ToTable("price_offer", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("role_pkey");

                    b.ToTable("roles", "eart");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Observer"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Buyer"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DateWalletAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_wallet_added");

                    b.Property<string>("DepositContract")
                        .HasColumnType("text")
                        .HasColumnName("deposit_contract");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Wallet")
                        .HasColumnType("text")
                        .HasColumnName("wallet");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.ToTable("user", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.UserPortalNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("DateOfNotification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_notification");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean")
                        .HasColumnName("seen");

                    b.Property<DateTime>("SeenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("seen_date");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_portal_notification_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_portal_notification_user_id");

                    b.ToTable("user_portal_notification", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", "eart");
                });

            modelBuilder.Entity("eArtRegister.API.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.Bundle", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bundle_system_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.BundleRate", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.Bundle", "Bundle")
                        .WithMany("Rates")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bundle_rate_bundles_bundle_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("BundleRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bundle_rate_system_users_user_id");

                    b.Navigation("Bundle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.FollowBundle", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.Bundle", "Bundle")
                        .WithMany("Followers")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follow_bundle_bundle_bundle_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("FollowingBundles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follow_bundle_system_users_user_id");

                    b.Navigation("Bundle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.FollowNFT", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.NFT", "NFT")
                        .WithMany("Followers")
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follow_nft_nf_ts_nft_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("FollowingNFTs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follow_nft_system_users_user_id");

                    b.Navigation("NFT");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.FollowUser", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.User", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follow_user_system_users_followed_user_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("FollowingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_follow_user_system_users_user_id");

                    b.Navigation("FollowedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFT", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.Bundle", "Bundle")
                        .WithMany("NFTs")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_bundle_bundle_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "Creator")
                        .WithMany("MintedNFTs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_system_users_creator_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.NFTStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_nft_nft_statuses_status_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", null)
                        .WithMany("OwnedNFTs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_nft_system_users_user_id");

                    b.Navigation("Bundle");

                    b.Navigation("Creator");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTActionHistory", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.NFT", "NFT")
                        .WithMany()
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_nft_action_history_nf_ts_nft_id");

                    b.Navigation("NFT");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTCategory", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_category_category_category_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.NFT", "NFT")
                        .WithMany("Categories")
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_category_nf_ts_nft_id");

                    b.Navigation("Category");

                    b.Navigation("NFT");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTLike", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.NFT", "NFT")
                        .WithMany("Likes")
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_like_nft_nft_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("NFTLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_like_system_users_user_id");

                    b.Navigation("NFT");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFTRate", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.NFT", "NFT")
                        .WithMany("Rates")
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_rate_nf_ts_nft_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("NFTRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_nft_rate_system_users_user_id");

                    b.Navigation("NFT");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.PriceOffer", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.NFT", "NFT")
                        .WithMany("PriceOffers")
                        .HasForeignKey("NFTId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_price_offer_nf_ts_nft_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_price_offer_system_users_user_id");

                    b.Navigation("NFT");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.UserPortalNotification", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_portal_notification_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("eArtRegister.API.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_roles_role_id");

                    b.HasOne("eArtRegister.API.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eArtRegister.API.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eArtRegister.API.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("eArtRegister.API.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eArtRegister.API.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.Bundle", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("NFTs");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.NFT", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Followers");

                    b.Navigation("Likes");

                    b.Navigation("PriceOffers");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("eArtRegister.API.Domain.Entities.User", b =>
                {
                    b.Navigation("BundleRates");

                    b.Navigation("Followers");

                    b.Navigation("FollowingBundles");

                    b.Navigation("FollowingNFTs");

                    b.Navigation("FollowingUsers");

                    b.Navigation("MintedNFTs");

                    b.Navigation("NFTLikes");

                    b.Navigation("NFTRates");

                    b.Navigation("Notifications");

                    b.Navigation("Offers");

                    b.Navigation("OwnedNFTs");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
